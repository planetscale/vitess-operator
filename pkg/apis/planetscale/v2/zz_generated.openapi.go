// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v2

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserver":            schema_pkg_apis_planetscale_v2_EtcdLockserver(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverSpec":        schema_pkg_apis_planetscale_v2_EtcdLockserverSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverStatus":      schema_pkg_apis_planetscale_v2_EtcdLockserverStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackup":              schema_pkg_apis_planetscale_v2_VitessBackup(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupSpec":          schema_pkg_apis_planetscale_v2_VitessBackupSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStatus":        schema_pkg_apis_planetscale_v2_VitessBackupStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorage":       schema_pkg_apis_planetscale_v2_VitessBackupStorage(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageSpec":   schema_pkg_apis_planetscale_v2_VitessBackupStorageSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageStatus": schema_pkg_apis_planetscale_v2_VitessBackupStorageStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCell":                schema_pkg_apis_planetscale_v2_VitessCell(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellSpec":            schema_pkg_apis_planetscale_v2_VitessCellSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellStatus":          schema_pkg_apis_planetscale_v2_VitessCellStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCluster":             schema_pkg_apis_planetscale_v2_VitessCluster(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterSpec":         schema_pkg_apis_planetscale_v2_VitessClusterSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterStatus":       schema_pkg_apis_planetscale_v2_VitessClusterStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspace":            schema_pkg_apis_planetscale_v2_VitessKeyspace(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceSpec":        schema_pkg_apis_planetscale_v2_VitessKeyspaceSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceStatus":      schema_pkg_apis_planetscale_v2_VitessKeyspaceStatus(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShard":               schema_pkg_apis_planetscale_v2_VitessShard(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardSpec":           schema_pkg_apis_planetscale_v2_VitessShardSpec(ref),
		"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardStatus":         schema_pkg_apis_planetscale_v2_VitessShardStatus(ref),
	}
}

func schema_pkg_apis_planetscale_v2_EtcdLockserver(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdLockserver runs an etcd cluster for use as a Vitess lockserver. Unlike etcd-operator, it uses static bootstrapping and PVCs, treating members as stateful rather the ephemeral. Bringing back existing members instead of creating new ones means etcd can recover from loss of quorum without data loss, which is important for Vitess because restoring from an etcd backup (resetting the lockserver to a point in the past) would violate the consistency model that Vitess expects of a lockserver.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.EtcdLockserverStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_EtcdLockserverSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdLockserverSpec defines the desired state of an EtcdLockserver.",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the etcd server image (including version tag) to deploy. Default: Let the operator choose.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicy specifies if/when to pull a container image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources specify the compute resources to allocate for each etcd member. Default: Let the operator choose.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"dataVolumeClaimTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "DataVolumeClaimTemplate configures the PersistentVolumeClaims that will be created for each etcd instance to store its data files. This field is required.\n\nIMPORTANT: For a cell-local lockserver, you must set a storageClassName here for a StorageClass that's configured to only provision volumes in the Availability Zone that corresponds to the Vitess cell. Default: Let the operator choose.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
					"extraFlags": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraFlags can optionally be used to override default flags set by the operator, or pass additional flags to etcd. All entries must be key-value string pairs of the form \"flag\": \"value\". The flag name should not have any prefix (just \"flag\", not \"-flag\"). To set a boolean flag, set the string value to either \"true\" or \"false\".",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"extraEnv": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraEnv can optionally be used to override default environment variables set by the operator, or pass additional environment variables.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"extraVolumes": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVolumes can optionally be used to override default Pod volumes defined by the operator, or provide additional volumes to the Pod. Note that when adding a new volume, you should usually also add a volumeMount to specify where in each container's filesystem the volume should be mounted.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"extraVolumeMounts": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVolumeMounts can optionally be used to override default Pod volumeMounts defined by the operator, or specify additional mounts. Typically, these are used to mount volumes defined through extraVolumes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"initContainers": {
						SchemaProps: spec.SchemaProps{
							Description: "InitContainers can optionally be used to supply extra init containers that will be run to completion one after another before any app containers are started.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "Affinity allows you to set rules that constrain the scheduling of your Etcd pods. WARNING: These affinity rules will override all default affinities that we set; in turn, we can't guarantee optimal scheduling of your pods if you choose to set this field.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations can optionally be used to attach custom annotations to Pods created for this component.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"extraLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraLabels can optionally be used to attach custom labels to Pods created for this component.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone is the name of the Availability Zone that this lockserver should run in. This value should match the value of the \"failure-domain.beta.kubernetes.io/zone\" label on the Kubernetes Nodes in that AZ. If the Kubernetes Nodes don't have such a label, leave this empty.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_planetscale_v2_EtcdLockserverStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EtcdLockserverStatus defines the observed state of an EtcdLockserver.",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"available": {
						SchemaProps: spec.SchemaProps{
							Description: "Available is a condition that indicates whether the cluster is able to serve queries.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientServiceName": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientServiceName is the name of the Service for etcd client connections.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackup is a one-way mirror of metadata for a Vitess backup. These objects are created automatically by the VitessBackupStorage controller to provide access to backup metadata from Kubernetes. Each backup found in the storage location will be represented by its own VitessBackup object.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackupSpec defines the desired state of the backup.",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackupStatus describes the observed state of the backup.",
				Properties: map[string]spec.Schema{
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "StartTime is the time when the backup started.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"finishedTime": {
						SchemaProps: spec.SchemaProps{
							Description: "FinishedTime is the time when the backup finished.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"complete": {
						SchemaProps: spec.SchemaProps{
							Description: "Complete indicates whether the backup ever completed.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"position": {
						SchemaProps: spec.SchemaProps{
							Description: "Position is the replication position of the snapshot that was backed up. The position is expressed in the native, GTID-based format of the MySQL flavor that took the backup. This is only available after the backup is complete.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"engine": {
						SchemaProps: spec.SchemaProps{
							Description: "Engine is the Vitess backup engine implementation that was used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageDirectory": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageDirectory is the name of the parent directory in storage that contains this backup.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageName": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageName is the name of the backup in storage. This is different from the name of the VitessBackup object created to represent metadata about the actual backup in storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackupStorage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackupStorage represents a storage location for Vitess backups. It provides access to metadata about Vitess backups inside Kubernetes by maintaining a set of VitessBackup objects that represent backups in the given storage location. One VitessBackupStorage represents a storage location defined at the VitessCluster level, so it provides access to metadata about backups stored in that location for any keyspace and any shard in that cluster.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupStorageStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackupStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackupStorageSpec defines the desired state of VitessBackupStorage.",
				Properties: map[string]spec.Schema{
					"location": {
						SchemaProps: spec.SchemaProps{
							Description: "Location specifies the Vitess parameters for connecting to the backup storage location.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation"),
						},
					},
				},
				Required: []string{"location"},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessBackupStorageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessBackupStorageStatus defines the observed state of VitessBackupStorage.",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"totalBackupCount": {
						SchemaProps: spec.SchemaProps{
							Description: "TotalBackupCount is the total number of backups found in this storage location, across all keyspaces and shards.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_planetscale_v2_VitessCell(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessCell represents a group of Nodes in a given failure domain (Zone), plus Vitess components like the lockserver and gateway that are local to each cell. Together, these cell-local components make it possible for Vitess instances (tablets) to run on those Nodes, and for clients to reach Vitess instances in the cell.\n\nNote that VitessCell does not \"own\" the VitessKeyspaces deployed in it, just like a Node does not own the Pods deployed on it. In addition, each VitessKeyspace can deploy Vitess instances in multiple VitessCells, just like a Deployment can manage Pods that run on multiple Nodes.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessCellSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessCellSpec defines the desired state of a VitessCell.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the cell name as it should be provided to Vitess. Note that this is different from the VitessCell object's metadata.name, which is generated by the operator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone is the name of the Availability Zone that this Vitess Cell should run in. This value should match the value of the \"failure-domain.beta.kubernetes.io/zone\" label on the Kubernetes Nodes in that AZ. If the Kubernetes Nodes don't have such a label, leave this empty.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "Lockserver specifies either a deployed or external lockserver to be used as the Vitess cell-local topology store. Default: Put this cell's topology data in the global lockserver instead of its own lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverSpec"),
						},
					},
					"gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "Gateway configures the Vitess Gateway deployment in this cell.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellGatewaySpec"),
						},
					},
					"globalLockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "GlobalLockserver are the params to connect to the global lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams"),
						},
					},
					"allCells": {
						SchemaProps: spec.SchemaProps{
							Description: "AllCells is a list of all cells in the Vitess cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Images are not customizable by users at the cell level because version skew across the cluster is discouraged except during rolling updates, in which case this field is automatically managed by the VitessCluster controller that owns this VitessCell.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellImages"),
						},
					},
					"extraVitessFlags": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVitessFlags is inherited from the parent's VitessClusterSpec.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"imagePullPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicies are inherited from the VitessCluster spec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies"),
						},
					},
					"topologyReconciliation": {
						SchemaProps: spec.SchemaProps{
							Description: "TopologyReconciliation is inherited from the parent's VitessClusterSpec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig"),
						},
					},
				},
				Required: []string{"name", "globalLockserver", "allCells"},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellGatewaySpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellImages", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessCellStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessCellStatus defines the observed state of VitessCell",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"lockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "Lockserver is a summary of the status of the cell-local lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverStatus"),
						},
					},
					"gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "Gateway is a summary of the status of vtgate in this cell.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellGatewayStatus"),
						},
					},
					"keyspaces": {
						SchemaProps: spec.SchemaProps{
							Description: "Keyspaces is a summary of keyspaces deployed in this cell. This summary could be empty either if there are no keyspaces, or if the controller failed to read the current state. Use the Idle condition to distinguish these scenarios when the difference matters.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellKeyspaceStatus"),
									},
								},
							},
						},
					},
					"idle": {
						SchemaProps: spec.SchemaProps{
							Description: "Idle is a condition indicating whether the cell can be turned down. If Idle is True, there are no keyspaces deployed in the cell, so it should be safe to turn down the cell.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellGatewayStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellKeyspaceStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessCluster is the top-level interface for configuring a cluster.\n\nAlthough the VitessCluster controller creates various secondary objects like VitessCells, all the user-accessible configuration ultimately lives here. The other objects should be considered read-only representations of subsets of the dynamic cluster status. For example, you can examine a specific VitessCell object to get more details on the status of that cell than are summarized in the VitessCluster status, but any configuration changes should only be made in the VitessCluster object.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessClusterSpec defines the desired state of VitessCluster.",
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Images specifies the container images (including version tag) to use in the cluster. Default: Let the operator choose.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImages"),
						},
					},
					"imagePullPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicies specifies the container image pull policies to use for images defined in the 'images' field.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies"),
						},
					},
					"backup": {
						SchemaProps: spec.SchemaProps{
							Description: "Backup specifies how to take and store Vitess backups. This is optional but strongly recommended. In addition to disaster recovery, Vitess currently depends on backups to support provisioning of a new tablet in a shard with existing data, as an implementation detail.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.ClusterBackupSpec"),
						},
					},
					"globalLockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "GlobalLockserver specifies either a deployed or external lockserver to be used as the Vitess global topology store. Default: Deploy an etcd cluster as the global lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverSpec"),
						},
					},
					"vitessDashboard": {
						SchemaProps: spec.SchemaProps{
							Description: "Dashboard deploys a set of Vitess Dashboard servers (vtctld) for the Vitess cluster.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessDashboardSpec"),
						},
					},
					"cells": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Cells is a list of templates for VitessCells to create for this cluster.\n\nEach VitessCell represents a set of Nodes in a given failure domain, to which VitessKeyspaces can be deployed. The VitessCell also deploys cell-local services that any keyspaces deployed there will need.\n\nThis field is required, but it may be set to an empty list: []. Before removing any cell from this list, you should first ensure that no keyspaces are set to deploy to this cell.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellTemplate"),
									},
								},
							},
						},
					},
					"keyspaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Keyspaces defines the logical databases to deploy.\n\nA VitessKeyspace can deploy to multiple VitessCells.\n\nThis field is required, but it may be set to an empty list: []. Before removing any keyspace from this list, you should first ensure that it is undeployed from all cells by clearing the keyspace's list of target cells.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceTemplate"),
									},
								},
							},
						},
					},
					"extraVitessFlags": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVitessFlags can optionally be used to pass flags to all Vitess components. WARNING: Any flags passed here must be flags that can be accepted by vtgate, vtctld and vttablet. An example use-case would be topo flags.\n\nAll entries must be key-value string pairs of the form \"flag\": \"value\". The flag name should not have any prefix (just \"flag\", not \"-flag\"). To set a boolean flag, set the string value to either \"true\" or \"false\".",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"topologyReconciliation": {
						SchemaProps: spec.SchemaProps{
							Description: "TopologyReconciliation can be used to enable or disable registration or pruning of various vitess components to and from topo records.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig"),
						},
					},
				},
				Required: []string{"cells"},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.ClusterBackupSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessCellTemplate", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessDashboardSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImages", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceTemplate"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessClusterStatus defines the observed state of VitessCluster",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"globalLockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "GlobalLockserver is the status of the global lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverStatus"),
						},
					},
					"gatewayServiceName": {
						SchemaProps: spec.SchemaProps{
							Description: "GatewayServiceName is the name of the cluster-wide vtgate Service.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vitessDashboard": {
						SchemaProps: spec.SchemaProps{
							Description: "VitessDashboard is a summary of the status of the vtctld deployment.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessDashboardStatus"),
						},
					},
					"cells": {
						SchemaProps: spec.SchemaProps{
							Description: "Cells is a summary of the status of desired cells.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterCellStatus"),
									},
								},
							},
						},
					},
					"keyspaces": {
						SchemaProps: spec.SchemaProps{
							Description: "Keyspaces is a summary of the status of desired keyspaces.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterKeyspaceStatus"),
									},
								},
							},
						},
					},
					"orphanedCells": {
						SchemaProps: spec.SchemaProps{
							Description: "OrphanedCells is a list of unwanted cells that could not be turned down.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus"),
									},
								},
							},
						},
					},
					"orphanedKeyspaces": {
						SchemaProps: spec.SchemaProps{
							Description: "OrphanedKeyspaces is a list of unwanted keyspaces that could not be turned down.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.LockserverStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterCellStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessClusterKeyspaceStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessDashboardStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessKeyspace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessKeyspace represents the deployment of a logical database in Vitess. Each keyspace consists of a number of shards, which then consist of tablets. The tablets belonging to one VitessKeyspace can ultimately be deployed across various VitessCells.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessKeyspaceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessKeyspaceSpec defines the desired state of a VitessKeyspace.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the keyspace name as it should be provided to Vitess. Note that this is different from the VitessKeyspace object's metadata.name, which is generated by the operator.\n\nWARNING: DO NOT change the name of a keyspace that was already deployed. Keyspaces cannot be renamed, so this will be interpreted as an instruction to delete the old keyspace and create a new one.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"partitionings": {
						SchemaProps: spec.SchemaProps{
							Description: "Partitionings specify how to divide the keyspace up into shards by defining the range of keyspace IDs that each shard contains. For example, you might divide the keyspace into N equal-sized key ranges.\n\nNote that this is distinct from defining how each row maps to a keyspace ID, which is done in the VSchema. Partitioning is purely an operational concern (scaling the infrastructure), while VSchema is an application-level concern (modeling relationships between data). This separation of concerns allows resharding to occur generically at the infrastructure level without any knowledge of the data model.\n\nEach partitioning must define a set of shards that fully covers the space of all possible keyspace IDs; there can be no gaps between ranges. There's usually only one partitioning present at a time, but during resharding, it's necessary to launch the destination shards alongside the source shards. When the resharding is complete, the old partitioning can be removed, which will turn down (undeploy) any unneeded shards.\n\nIf only some shards are being split or joined during resharding, the shards that aren't changing must be specified in both partitionings, although the common shards will be shared (only deployed once). If the per-shard configuration differs, the configuration in the latter partitioning (in the order listed in this field) will be used. For this reason, it's recommended to add new partitionings at the end, and only remove partitionings from the beginning.\n\nThis field is required. An unsharded keyspace may be specified as a partitioning into 1 part.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspacePartitioning"),
									},
								},
							},
						},
					},
					"turndownPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "TurndownPolicy specifies what should happen if this keyspace is ever removed from the VitessCluster spec. By default, removing a keyspace entry from the VitessCluster spec will NOT actually turn down the deployed resources, unless it can be verified that the keyspace was previously set to have 0 total desired tablets across all shards.\n\nWith this default policy (RequireIdle), before removing the keyspace entry from the spec, you must first edit the keyspace entry to remove all tablet pools from all shards, and wait for that change to roll out. If a keyspace entry is removed too soon, the keyspace resources will remain deployed indefinitely, and the keyspace will be listed in the orphanedKeyspaces field of VitessCluster status.\n\nThis is a safety mechanism to prevent accidental edits to the cluster object from having immediate, destructive consequences. If the cluster spec is only ever edited by automation whose edits you trust to be safe, you can set the policy to Immediate to skip these checks.\n\nDefault: RequireIdle",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"globalLockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "GlobalLockserver are the params to connect to the global lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams"),
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Images are not customizable by users at the keyspace level because version skew across the cluster is discouraged except during rolling updates, in which case this field is automatically managed by the VitessCluster controller that owns this VitessKeyspace.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceImages"),
						},
					},
					"imagePullPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicies are inherited from the VitessCluster spec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies"),
						},
					},
					"zoneMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ZoneMap is a map from Vitess cell name to zone (failure domain) name for all cells defined in the VitessCluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"backupLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupLocations are the backup locations defined in the VitessCluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation"),
									},
								},
							},
						},
					},
					"backupEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupEngine specifies the Vitess backup engine to use, either \"builtin\" or \"xtrabackup\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraVitessFlags": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVitessFlags is inherited from the parent's VitessClusterSpec.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"topologyReconciliation": {
						SchemaProps: spec.SchemaProps{
							Description: "TopologyReconciliation is inherited from the parent's VitessClusterSpec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig"),
						},
					},
				},
				Required: []string{"name", "partitionings", "globalLockserver", "zoneMap"},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceImages", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspacePartitioning", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessKeyspaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessKeyspaceStatus defines the observed state of a VitessKeyspace.",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"shards": {
						SchemaProps: spec.SchemaProps{
							Description: "Shards is a summary of the status of all desired shards.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceShardStatus"),
									},
								},
							},
						},
					},
					"orphanedShards": {
						SchemaProps: spec.SchemaProps{
							Description: "OrphanedShards is a list of unwanted shards that could not be turned down.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus"),
									},
								},
							},
						},
					},
					"idle": {
						SchemaProps: spec.SchemaProps{
							Description: "Idle is a condition indicating whether the keyspace can be turned down. If Idle is True, the keyspace is not deployed in any cells, so it should be safe to turn down the keyspace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceShardStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessShard(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessShard represents a group of Vitess instances (tablets) that store a subset of the data in a logical database (keyspace).\n\nThe tablets belonging to one VitessShard can ultimately be deployed across various VitessCells. All the tablets in a given shard, across all cells, use MySQL replication to stay eventually consistent with the MySQL master for that shard.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardStatus"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessShardSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessShardSpec defines the desired state of a VitessShard.",
				Properties: map[string]spec.Schema{
					"tabletPools": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []string{
									"type",
									"cell",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TabletPools specify groups of tablets in a given cell with a certain tablet type and a shared configuration template.\n\nThere must be at most one pool in this list for each (cell,type) pair. Each shard must have at least one \"replica\" pool (in at least one cell) in order to be able to serve.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardTabletPool"),
									},
								},
							},
						},
					},
					"databaseInitScriptSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "DatabaseInitScriptSecret specifies the init_db.sql script file to use for this shard. This SQL script file is executed immediately after bootstrapping an empty database to set up initial tables and other MySQL-level entities needed by Vitess.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.SecretSource"),
						},
					},
					"replication": {
						SchemaProps: spec.SchemaProps{
							Description: "Replication configures Vitess replication settings for the shard.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessReplicationSpec"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations can optionally be used to attach custom annotations to the VitessShard object.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the shard name as its known to Vitess.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zoneMap": {
						SchemaProps: spec.SchemaProps{
							Description: "ZoneMap is a map from Vitess cell name to zone (failure domain) name for all cells defined in the VitessCluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Images are not customizable by users at the shard level because version skew across the shard is discouraged except during rolling updates, in which case this field is automatically managed by the VitessKeyspace controller that owns this VitessShard.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceImages"),
						},
					},
					"imagePullPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicies are inherited from the VitessCluster spec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies"),
						},
					},
					"keyRange": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyRange is the range of keyspace IDs served by this shard.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyRange"),
						},
					},
					"globalLockserver": {
						SchemaProps: spec.SchemaProps{
							Description: "GlobalLockserver are the params to connect to the global lockserver.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams"),
						},
					},
					"backupLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupLocations are the backup locations defined in the VitessCluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation"),
									},
								},
							},
						},
					},
					"backupEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupEngine specifies the Vitess backup engine to use, either \"builtin\" or \"xtrabackup\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraVitessFlags": {
						SchemaProps: spec.SchemaProps{
							Description: "ExtraVitessFlags is inherited from the parent's VitessClusterSpec.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"topologyReconciliation": {
						SchemaProps: spec.SchemaProps{
							Description: "TopologyReconciliation is inherited from the parent's VitessClusterSpec.",
							Ref:         ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig"),
						},
					},
				},
				Required: []string{"databaseInitScriptSecret", "name", "zoneMap", "images", "keyRange", "globalLockserver"},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.SecretSource", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.TopoReconcileConfig", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessBackupLocation", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessImagePullPolicies", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyRange", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessKeyspaceImages", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessLockserverParams", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessReplicationSpec", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardTabletPool"},
	}
}

func schema_pkg_apis_planetscale_v2_VitessShardStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VitessShardStatus defines the observed state of a VitessShard.",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "The generation observed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"tablets": {
						SchemaProps: spec.SchemaProps{
							Description: "Tablets is a summary of the status of all desired tablets in the shard.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessTabletStatus"),
									},
								},
							},
						},
					},
					"orphanedTablets": {
						SchemaProps: spec.SchemaProps{
							Description: "OrphanedTablets is a list of unwanted tablets that could not be turned down.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus"),
									},
								},
							},
						},
					},
					"cells": {
						SchemaProps: spec.SchemaProps{
							Description: "Cells is a list of cells in which any tablets for this shard are deployed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"hasMaster": {
						SchemaProps: spec.SchemaProps{
							Description: "HasMaster is a condition indicating whether the Vitess topology reflects a master for this shard.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hasInitialBackup": {
						SchemaProps: spec.SchemaProps{
							Description: "HasInitialBackup is a condition indicating whether the initial backup has been seeded for the shard.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"idle": {
						SchemaProps: spec.SchemaProps{
							Description: "Idle is a condition indicating whether the shard can be turned down. If Idle is True, the shard is not part of the active shard set (partitioning) for any tablet type in any cell, so it should be safe to turn down the shard.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a map of all VitessShard specific conditions we want to set and monitor. It's ok for multiple controllers to add conditions here, and those conditions will be preserved.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardCondition"),
									},
								},
							},
						},
					},
					"masterAlias": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterAlias is the tablet alias of the master according to the global shard record. This could be empty either because there is no master, or because the shard record could not be read. Check the HasMaster condition whenever the distinction is important.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupLocations": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupLocations reports information about the backups for this shard in each backup location.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.ShardBackupLocationStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.OrphanStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.ShardBackupLocationStatus", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessShardCondition", "planetscale.dev/vitess-operator/pkg/apis/planetscale/v2.VitessTabletStatus"},
	}
}
